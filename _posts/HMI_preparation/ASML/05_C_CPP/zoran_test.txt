
* 1)	What is the output of the following program:
#include <stdio.h>
int main()
{
	int i=6;
	printf( "%d\n", i++ * i++ );
}

Ans: 42 



* 2)	What is the output of the following program?.
#include <stdio.h>
int main()
{
	int a=15;
	int b=17;

	a = a + b;
	b = a - b;
	a = a – b;
	printf( "a=%d  b=%d\n", a, b);
}


Ans: a=17  b=15




* 3)	What is the output of the following program?. 
#include <stdio.h>
int main()
{
	char name[] = "ZORAN";
	char *p = name;

	printf( "%c \n", *p++ );
}

Ans: Z




* 4)	What is the output of the following program?. - hard
#include <stdio.h>
char *ptr2Countries[] = { "USA", "Taiwan", "China", "Korea" };
int main()
{
	char **pp;
	
	pp = ptr2Countries;
	pp++;
	printf( "%s\n", (*pp +1) );
}


Ans: aiwan




* 5)	Write a declaration of a function f1() that takes a generic pointer and returns pointer to integer.

Ans: int *f1( void *);




* 6)	Write a definition of a pointer (named fPter) to function that takes pointer to integer and returns an integer?


Ans: int (*fPter) (int *)



* 7)	Write missing statement to achieve the one’s complement of k.
#include <stdio.h>
int main()
{
	unsigned int k=0x17;

	. . . . . . . . .  .

	printf( "%x\n", k );
}


Ans: k = ~k;
     or
     k = k ^ 0xff;


* 8)	What is the output of the following program? - hard 
1. the assignment in the static var into a function, is only valid for once 
#include <stdio.h>
int *increment( void )
{
	static int k=10;

	k++;
	++k;
	return &k;
}
int main()
{
	int *iPtr;
	iPtr = increment();
// iptr = 12 
	iPtr = increment();
// iptr = 14 
	*iPtr = *iPtr + 3;
	printf( "%d\n", *iPtr );
}

Ans: 17




* 9)	Which of the following is true after compilation of the below program?
#include <stdio.h>
static int k=4;
int main()
{
	static int k=6;
	printf( "%d\n", k );
}

A. Compiler generates error for multiply defined k
B. Compiler generates warning for multiply defined k.
C. Compiler generates linking error.
D. Compilation is successful.  If so, what is the print ?
E. None of the above is true.

Ans: D, 6



* 10)	Find out the mistakes in the program?
#include <stdio.h>
int main()
{
	int numArray[5] = { 1, 2, 3, 4, 5 };
	int i;
	
	/* Calculate squares */
	for( i=1; i <=5; ++i )
	{
		numArray[i] = numArray[i] * numArray[i];
	}
}


Ans: Array index cannot be 5. for( i=0; i <=4; i++ )



* 11)	What is the output of the following program?.
#include <stdio.h>
int main()
{
	unsigned short int k=0x1234;

	k = k | k;
	k = k ^ k;
	printf( "%d\n", k );
}


Ans: 0  ( XOR K K is always zero )



* 12)	What is the output of the following program?
#include <stdio.h>
#define SQUARE(x)	  x * x
int main()   
{
	int x =9;
	int y;

	y = SQUARE(x+1);
	x++;
	printf( "%d  %d\n", x, y );
}

Ans: 10  19  
(no half score should be given if candidate answers 10 100)



* 13)	Which of the following statements is true about sizeof()?
A. sizeof() is a function.
B. sizeof() is a macro
C. sizeof() is an operator
D. None of the above.

Ans: C


* 14)	Which of the following is true about following statement
struct point
{
	int x;
	int y;
};

A. Memory is allocated for x only.
B. Memory allocated for y only.
C. Memory is allocated for both x and y.
D. No memory is allocated.
E. Memory is allocated for point.


Ans: D




* 15)	Which of the following is true about following structure
struct record
{
	char symbol;
	int value;
} rec1;
A. sizeof(rec1) == sizeof(rec1.symbol) + sizeof(rec1.value)
B. sizeof(rec1) <= sizeof(rec1.symbol) + sizeof(rec1.value)
C. sizeof(rec1) >= sizeof(rec1.symbol) + sizeof(rec1.value)
D. sizeof(rec1) != sizeof(rec1.symbol) + sizeof(rec1.value)

Ans: C

#include <stdio.h>
struct record
{
	char symbol;
	int value;
} rec1;
int main()
{
  int a = sizeof( rec1.symbol );
  int b = sizeof( rec1.value );
  int c = sizeof( rec1 );
  printf(" %d, %d, %d\n", a,b,c);
}
// 1 4 8





* 16)	Which of the following is true about following statements
struct point
{
	int x;
	int y;
} p;
typedef struct line
{
	in x;
	int y;
	float slope;
} line;

A. Memory is allocated for p only.
B. Memory is allocated for line only.
C. Memory is allocated for neither p nor line.
D. Memory is allocated for p and line.
E. Memory is allocated for slope.

Ans: A



* 17)	What is output of the following program? (The ASCII code of 0 is 0x30)
#include <stdio.h>
union rec
{
	char c;
	unsigned int i;
};
int main()
{
	union rec  u;

	u.i = 0;
	u.c = ‘0’;
	printf( "%d %c\n", u.i, u.c );
}


Ans: 48  0  



* 18)	What is wrong with the following program?
#include <stdio.h>
extern char *getName( char *info)
int main()
{
	char name[128];

	name = getName( "Enter name:" );
}


Ans: You cannot assign pointer to an array.
It should be
strcpy( name, getName( "Enter name:" ) );


* 19)	What is the output of the following program?
#include <stdio.h>
int main()
{
	int b=0xAA;
	b >> 4;
	printf( "%x\n", b );
}

Ans: 0xAA


* 20)	What is the output of the following program?
#include <stdio.h>
int main()
{
	int i,j=1;
	for( i=0; i <10; i++ )
	{
		j=j+1;
	}
	printf( "%d  %d", i, j );
}

Ans: 10  11


* 21)	What is the output of the following program?
#include <stdio.h>
int main()
{
	int x=1;

	if ( x=10 )
		x = 1000;
	else
		x = 10;
	
	printf( "%d\n", x );
}

Ans: 1000




* 22)	Define variable ap as an array of 5 pointers to integers. - hard

Ans: int (*ap) [5];


* 23)	In C language, if you don’t know integer array (named intArray) size at compile time - hard
but knows its size through variable called array_size at run time.
(a) How do you allocate memory for the array? 
(b) How about in C++?

Ans: (a) int *intArray = malloc( array_size * sizeof(int) );
     (b) int *intArray = new int[array_size];



* 24)	What is wrong in the following initializations?. - hard
int main()
{
	char *s1 = "Zoran";
	char *s2 = "Test";
	char *s3 = strcat( s1, s2 );
}


Ans: No memory has been allocated for s3.



* 25)	Which of the following is true about semaphores?
A. Semaphores are created by high priority threads.
B. Semaphores cannot be deleted once they are created.
C. A thread will be able access critical section without acquiring the semaphores.
D. B and C are true.
E. None of the above.

Ans: C


* 26)	Which of the following is true about RTOS - hard
A. Thread pre-emption is not allowed
B. No two threads can have the same priority.
C. Each thread has a priority.
D. Thread priority is assigned by CPU.
E. B and D

Ans: C


* 27) With below definition, what is the result whenever executing this line?
#define TLASSERT(test, message) (!(test) ? AssertPrint(message) : (void) 0) 

TLASSERT(1, "a test");

A.	0
B.	a test
C. Dummy return

Ans: dummy return


* 28)	Which of the following can cause context switch among threads?
A. sleep()
B. Interrupt
C. Trap
D. All of the above
E. None of the above.

Ans: D



* 29)	Static variables in C are allocated from - hard
A. Stack
B. Heap
C. Part of the instruction opcode.
D. From stack if they are local to function, otherwise from heap.
E. None of the above.


Ans: B




* 30)	Which of the following is true? - hard
A. Each thread has its own stack.
B. Each thread has its own functions and other threads can not access them.
C. A thread can call any function.
D. Only A and C are true.
E. Only A and B are true.

Ans: D




* 31)	If there are N address lines and M data lines, maximum size of RAM that can be used in bits - hard

Ans: 2^N * M bits



* 32)	If 12 bits are used in PCM, then how many quantization levels are there? - hard

Ans: 2^12 = 4096 (also, 2 power 12, or 2**12 acceptable answers)



* 33)	Same program on CISC and RISC, normally
A. the program on CISC is shorter than on RISC
B. the program on RISC is shorter than RISC
C. the program on RISC and CISC is equal in size
D. None of the above


Ans: A



* 34)	When inserting a node in the linked list
A. All the previous nodes are moved to the left by one.
B. All the next nodes are moved to the right by one.
C. No movement in the memory.
D. None of the above.

Ans: C


* 35)	The ‘locality of reference’ is associated with - hard
A. Mutex
B. Semaphore
C. Cache
D. Context switch
E. None of the above

Ans: C


* 36)	What is the purpose of cache?


Ans: Fast access to memory


* 37)	Which data structure is associated with (a)LIFO (b)FIFO?


Ans: (a) Stack  (b) Queue



* 38)	Which of the following is true about linked lists?
A. Same number of nodes in the linked list consume less space than that of an array.
B. All the memory is allocated at compile time.
C. Insertion is easy.
D. Deletion is easy.
E. Both C and D.


Ans: E


* 39)	What is a context switch?

Ans: Saving state of the running thread and switching control to another thread that is in ready state.



* 40)	In RTOS, scheduling is based on ... - hard
A. Time sharing basis
B. First-come-first served basis
C. Priority basis
D. Most recently used basis
E. None of the above


Ans: C



* 41)	Message queues are used for ...


Ans: Process/thread communication.



* 42)	Thread synchronization is achieved through the use of . . .


Ans: Mutexes/Semapores.



* 43)	If a thread acquires a semaphore and forgets to release the semaphore
A. RTOS detects and releases the semaphore on behalf of the thread.
B. Semaphore is released automatically after N clock ticks
C. Other thread releases the semaphore.
D. Other thread will block at the semaphore, if it tries to acquire it.
E. None of the above.


Ans: D


 
* 44)	Which of the following is associated with recursion?
A. Queues
B. Stacks
C. Linked lists
D. Doubly linked lists
E. Hash tables.

Ans: B


* 45)	The terms ‘Front’ and ‘Rear’ are associated with
A. Stack
B. Queue
C. Linked list
D. Hast table
E. Trees

Ans: B


* 46)	A dictionary look up is best implemented with
A. Stacks
B. Linked lists
C. Hash tables
D. Trees
E. Hash Tables and Linked list
F  Arrays and messages

Ans: E



* 47)	To consider the function below: - hard
        int fun(int m, int n)
        {
           int a;
           if((m == n) || (n == 0))
             a = 10;
           else
           {
             a = fun(m-1, n-1) + fun(m-1, n);
             printf("%d, %d\n", m, n);
           }
           return a;
         }
            
(a)	Assume int answer = fun(4,3). What’s the value of answer?
(b)	What is the output while we call fun(4,3)?

Ans: 
(a) 40
(b) 
2 1
3 2
4 3


* 48)	Consider the following C programs. Please point out and correct the errors in the above program.
char *string;
char message[10];
int i;
printf("\nEnter title");
scanf("%s", string);
i = 0; 
while (*string != " ") {
    i++;
    string++;
}
message = "Title = ";
printf("%s %s %d before space", message, string, i);

Ans:  
#include <stdio.h>
main()
{
  char *string;
  char message[10];
  int i;
  printf("\nEnter title");
  scanf("%s", message);
  string = message;
  i = 0;
  while (*string != '\0') {
    i++;
    string++;
  }
  string = "Title =";
  printf("%s %s %d before space", string, message, i);
  return 0;
}




* 49)	Please write a function to reverse a string.
        void main(void)
        {
char a[] = "ABCDEFGH";
          printf("%s \n", a);   /* "ABCDEFGH" */
reverse_string(a);
          printf("%s \n", a);    /* "HGFEDCBA" */
}

Ans: 
     #define SWAP_CHAR( x, y ) {char c; c = x; x = y; y = c;}
     void reverse_string(char t[])
{
       int i,j;
       for(i = 0, j = strlen(t)-1; i < j; i++, j--)
          SWAP_CHAR(t[i], t[j]);
     }



* 50)	Write a binary search program in C. 
This function searches for an integer in a global sorted integer array
alpha[100]. This function takes an integer as a parameter.

(Hint: a binary search is a technique for locating a particular value in a
sorted list. This method selects the middle element in the span, comparing its
value to the target value, and determining if it is greater than, less than, or
equal to the target value.)


Ans: 


     binary_serach (int val)
     {
        int l, h, m;
        l = 0;
        h = 100 -1;
        while (l <= h)
        {
           m = (l + h) / 2;
           if (val < alpha[m])
           h = m -1;
           else if (val > alpha[m])
              l = m + 1;
           else
              return m;  /* found */
        }

        return -1;  // not found
     }  
